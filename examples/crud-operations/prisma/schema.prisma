// Prisma schema for CRUD operations example

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  name         String?
  role         UserRole    @default(USER)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  
  // Relations
  posts        Post[]
  auditLogs    AuditLog[]
  
  @@map("users")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String?   @db.Text
  excerpt     String?
  status      PostStatus @default(DRAFT)
  featured    Boolean   @default(false)
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  version     Int       @default(1)
  
  // Relations
  authorId    String    @map("author_id")
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?   @map("category_id")
  category    Category? @relation(fields: [categoryId], references: [id])
  
  // Many-to-many with tags
  tags        PostTag[]
  
  // Audit logs
  auditLogs   AuditLog[]
  
  @@index([status, publishedAt])
  @@index([authorId])
  @@index([categoryId])
  @@index([deletedAt])
  @@index([slug])
  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  posts       Post[]
  
  @@map("categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  color     String?
  createdAt DateTime  @default(now()) @map("created_at")
  
  posts     PostTag[]
  
  @@map("tags")
}

model PostTag {
  postId String
  tagId  String
  
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([postId, tagId])
  @@map("post_tags")
}

model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction
  tableName String      @map("table_name")
  recordId  String      @map("record_id")
  oldData   Json?       @map("old_data")
  newData   Json?       @map("new_data")
  userId    String      @map("user_id")
  ipAddress String?     @map("ip_address")
  userAgent String?     @map("user_agent")
  createdAt DateTime    @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id])
  post Post? @relation(fields: [recordId], references: [id])
  
  @@index([tableName, recordId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  RESTORE
  BULK_UPDATE
  BULK_DELETE
}